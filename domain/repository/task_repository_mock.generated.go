// Code generated by MockGen. DO NOT EDIT.
// Source: ./task_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	entity "example.com/todo-api/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// FindAllTasks mocks base method.
func (m *MockTaskRepository) FindAllTasks() []entity.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTasks")
	ret0, _ := ret[0].([]entity.Task)
	return ret0
}

// FindAllTasks indicates an expected call of FindAllTasks.
func (mr *MockTaskRepositoryMockRecorder) FindAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTasks", reflect.TypeOf((*MockTaskRepository)(nil).FindAllTasks))
}

// InsertTask mocks base method.
func (m *MockTaskRepository) InsertTask(title string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTask", title)
	ret0, _ := ret[0].(int)
	return ret0
}

// InsertTask indicates an expected call of InsertTask.
func (mr *MockTaskRepositoryMockRecorder) InsertTask(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTask", reflect.TypeOf((*MockTaskRepository)(nil).InsertTask), title)
}
